package be

import (
	"fmt"
)



const (
	Emp = uint64(0)
	Universe = uint64(0xffffffffffffffff)
	
	//file masks
	FileA = uint64(0x0101010101010101)
	FileB = uint64(0x0202020202020202)
	FileC = uint64(0x0404040404040404)
	FileD = uint64(0x0808080808080808)
	FileE = uint64(0x1010101010101010)
	FileF = uint64(0x2020202020202020)
	FileG = uint64(0x4040404040404040)
	FileH = uint64(0x8080808080808080)

	//rank mask
	Rank1 = uint64(0xff00000000000000)
	Rank2 = uint64(0x00ff000000000000)
	Rank3 = uint64(0x0000ff0000000000)
	Rank4 = uint64(0x000000ff00000000)
	Rank5 = uint64(0x00000000ff000000)
	Rank6 = uint64(0x0000000000ff0000)
	Rank7 = uint64(0x000000000000ff00)
	Rank8 = uint64(0x00000000000000ff)

	//useful masks
	M1 = uint64(0x5555555555555555)
	M2 = uint64(0x3333333333333333)
	M4 = uint64(0x0f0f0f0f0f0f0f0f)
	M8 = uint64(0x00ff00ff00ff00ff)
	M16 = uint64(0x0000ffff0000ffff)
	M32 = uint64(0x00000000ffffffff)
)

var (
)

//Single Bit Movement

func SouthOne(n uint64) uint64 {
	return n >> 8
}

func NorthOne(n uint64) uint64 {
  return n << 8
}

func EastOne(n uint64) uint64 {
  return (n << 1) &^ FileA
}

func SouthEastOne(n uint64) uint64 {
  return (n >> 7) &^ FileA
}

func NorthEastOne(n uint64) uint64 {
  return (n << 9) &^ FileA
}

func WestOne(n uint64) uint64 {
  return (n >> 1) &^ FileH
}

func SouthWestOne(n uint64) uint64 {
  return (n >> 9) &^ FileH
}

func  NorthWestOne(n uint64) uint64 {
  return (n << 7) &^ FileH
}

/*
 Calculates the bitcount of n
 */
func BitCount(n uint64) uint {
	//Constants for MIT Hakmem algorithm
	M1 := uint64(0x5555555555555555)
	M2 := uint64(0x3333333333333333)
	M4 := uint64(0x0f0f0f0f0f0f0f0f)
	M8 := uint64(0x00ff00ff00ff00ff)
	M16 := uint64(0x0000ffff0000ffff)
	M32 := uint64(0x00000000ffffffff)

	n = (n & M1) + ((n >> 1) & M1)
	n = (n & M2) + ((n >> 2) & M2)
	n = (n & M4) + ((n >> 4) & M4)
	n = (n & M8) + ((n >> 8) & M8)
	n = (n & M16) + ((n >> 16) & M16)
	n = (n & M32) + ((n >> 32) & M32)
	
	return uint(n)
}

func FirstOne(n uint64) uint {
	Index64 := []int {
		63,  0, 58,  1, 59, 47, 53,  2,
      60, 39, 48, 27, 54, 33, 42,  3,
      61, 51, 37, 40, 49, 18, 28, 20,
      55, 30, 34, 11, 43, 14, 22,  4,
      62, 57, 46, 52, 38, 26, 32, 41,
      50, 36, 17, 19, 29, 10, 13, 21,
      56, 45, 25, 31, 35, 16,  9, 12,
      44, 24, 15,  8, 23,  7,  6,  5,
	}
	
	Debruijn := uint64(0x07edd5e59a4e28c2)
	return uint(Index64[((n & -n) * Debruijn) >> 58])
}

func LastOne(n uint64) (result uint) {
	result = 0
	if n > 0xffffffff {
		n >>= 32
		result = 32
	}
	if n > 0xffff {
		n >>= 16
		result += 16
	}
	if n > 0xff {
		n >>= 8
		result += 8
	}
	result += uint(MsbTable[n])
	return
}

func PrintBitboard(n uint64) {
	grid := make([]byte, 64)
	for i := 0; i < 64; i++ {
		if n & BitSet[i] != 0 {
			grid[i] = '1'
		} else {
			grid[i] = '.'
		}
	}
	
	for rank := 8; rank > 0; rank-- {
		fmt.Print(" ", rank, " ")
		for file := 1; file < 9; file++ {
			fmt.Print(string(grid[Index[file][rank]]))
		}
		fmt.Println()
	}
	fmt.Println("   abcdefgh")
}