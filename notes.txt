
/*****************************************************************/
/*									MOVE GENERATION							  */
/*****************************************************************/

- Initial Tests prove move generation to be too slow
- too much space used with GameState objects
- fixes include 
  - new append function (NOT USED AS OF 11/02/13, not necessary)
  - preallocating memory (NOT USED AS OF 11/02/13, not necessary)
  - alpha-beta pruning / dynamic generation 

- discovered way to keep move information in 32 bit integer
- coupled with piece codes of 4 bits, we can save a huge amount of space
- only passing around moves (32 bits) as opposed to gamestates (96 bytes)

- magic bitboard multiplication
- key to move generation is pre-generated masks
- generation of millions of moves is easy, 800million in 1m30s with 
  concurrent pruning

11/02/13
MOVE GENERATOR ESSENTIALLY COMPLETE
- generates for a single state
- validity of moves appears to be fine
- some outlying error cases have been recorded and will be fixed
  - namely castling


/******************************************************************/
/*								Searching / Decision making				   */
/******************************************************************/

- first alpha beta working
- concurrent alpha beta in the pipeline
  - finished, working much faster concurrently

11/02/13
- principal variation search finished
- iterative deepening finished
- refactored so that searching handles the concurrency
- algorithm comparison testing
  - concurrency naturally faster

- need to reduce search space drastically [IMPORTANT]

25/02/13
- iterative deepening done
- causing problems in pvs
  - weird behaviour in movement
- concurrent searching needs a lot of work
  - stick to single pvs search

/******************************************************************/
/*										  Misc										*/
/******************************************************************/

- perhaps change over game to similar 4 bit piece codes
  - scrapped high level game view 11/02/13
